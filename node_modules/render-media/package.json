{
  "_args": [
    [
      {
        "raw": "render-media@^2.8.0",
        "scope": null,
        "escapedName": "render-media",
        "name": "render-media",
        "rawSpec": "^2.8.0",
        "spec": ">=2.8.0 <3.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/webtorrent"
    ]
  ],
  "_from": "render-media@>=2.8.0 <3.0.0",
  "_id": "render-media@2.10.0",
  "_inCache": true,
  "_location": "/render-media",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/render-media-2.10.0.tgz_1489956184301_0.8081690582912415"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "render-media@^2.8.0",
    "scope": null,
    "escapedName": "render-media",
    "name": "render-media",
    "rawSpec": "^2.8.0",
    "spec": ">=2.8.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webtorrent"
  ],
  "_resolved": "https://registry.npmjs.org/render-media/-/render-media-2.10.0.tgz",
  "_shasum": "57f39f8a0267e4a6795cfba19489982b4071745a",
  "_shrinkwrap": null,
  "_spec": "render-media@^2.8.0",
  "_where": "/data/mis_programas/torrent-player/node_modules/webtorrent",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/render-media/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "is-ascii": "^1.0.0",
    "mediasource": "^2.1.0",
    "stream-to-blob-url": "^2.0.0",
    "videostream": "^2.3.0"
  },
  "description": "Intelligently render media files in the browser",
  "devDependencies": {
    "brfs": "^1.4.1",
    "from2": "^2.1.0",
    "standard": "*",
    "string-to-stream": "^1.0.1",
    "tape": "^4.0.0",
    "zuul": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "57f39f8a0267e4a6795cfba19489982b4071745a",
    "tarball": "https://registry.npmjs.org/render-media/-/render-media-2.10.0.tgz"
  },
  "gitHead": "c9d3cce02475add1d1027bb6afc10393cbdb5521",
  "homepage": "https://github.com/feross/render-media",
  "keywords": [
    "convert",
    "blob",
    "buffer",
    "browserify",
    "filereader"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    }
  ],
  "name": "render-media",
  "optionalDependencies": {},
  "readme": "# render-media [![Build Status][travis-image]][travis-url] [![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url]\n\n#### Intelligently render media files in the browser\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/render-media.svg)](https://saucelabs.com/u/render-media)\n\nShow the file in a the browser by appending it to the DOM. This is a powerful\npackage that handles many file types like video (.mp4, .webm, .m4v, etc.), audio\n(.m4a, .mp3, .wav, etc.), images (.jpg, .gif, .png, etc.), and other file formats\n(.pdf, .md, .txt, etc.).\n\nThe file will be streamed into the page (if it's video or audio). Seeking the media\nelement will request a different byte range from the incoming file-like object.\n\nIn some cases, video or audio files will not be streamable because they're not in a\nformat that the browser can stream, so the file will be fully downloaded before being\nplayed. For other non-streamable file types like images and PDFs, the file will be\ndownloaded then displayed.\n\nThis module is used by [WebTorrent](https://webtorrent.io).\n\n### install\n\n```\nnpm install render-media\n```\n\n### usage\n\n```js\nvar render = require('render-media')\nvar from = require('from2')\n\nvar img = new Buffer('some jpg image data')\n\nvar file = {\n  name: 'cat.jpg',\n  createReadStream: function (opts) {\n    if (!opts) opts = {}\n    return from([ img.slice(opts.start || 0, opts.end || (img.length - 1)) ])\n  }\n}\n\nrender.append(file, 'body', function (err, elem) {\n  if (err) return console.error(err.message)\n\n  console.log(elem) // this is the newly created element with the media in it\n})\n```\n\n### api\n\n#### `render.append(file, rootElem, [opts], [function callback (err, elem) {}])`\n\n`file` is an object with a `name` (string, with file extension) and `createReadStream`\nmethod which provides the file data.\n\nHere's an example file:\n\n```js\nvar file = {\n  name: 'file.mp4'\n  createReadStream: function (opts) {\n    var start = opts.start\n    var end = opts.end\n    // Return a readable stream that provides the bytes between offsets \"start\"\n    // and \"end\" inclusive. This works just like fs.createReadStream(opts) from\n    // the node.js \"fs\" module.\n  }\n}\n```\n\nAn optional `file.length` property can also be set to specify the length of the\nfile in bytes. This will ensure that `render-media` does not attempt to load large\nfiles (>200 MB by default) into memory, which it does in the \"blob\" strategy. (See discussion\nof strategies below.)\n\n`rootElem` is a container element (CSS selector or reference to DOM node) that the\ncontent will be shown in. A new DOM node will be created for the content and\nappended to `rootElem`.\n\nIf provided, `opts` can contain the following options:\n\n- `autoplay`: Autoplay video/audio files (default: `true`)\n- `controls`: Show video/audio player controls (default: `true`)\n- `maxBlobLength`: Files above this size will skip the \"blob\" strategy and fail (default: `200 * 1000 * 1000` bytes)\n\nIf provided, `callback` will be called once the file is visible to the user.\n`callback` is called with an `Error` (or `null`) and the new DOM node that is\ndisplaying the content.\n\n#### `render.render(file, elem, [function callback (err, elem) {}])`\n\nLike `render.append` but renders directly into given element (or CSS selector).\n\n\n### why does video/audio streaming not work on file X?\n\nStreaming support depends on support for `MediaSource` API in the browser. All\nmodern browsers have `MediaSource` support.\n\nMany file types are supported (again, depending on browser support), but only `.mp4`,\n`.m4v`, and `.m4a` have full support, including seeking.\n\n### rendering strategies\n\nFor video and audio, `render-media` tries multiple methods of playing the file:\n\n- [`videostream`][videostream] -- best option, supports streaming **with seeking**,\n  but only works with MP4-based files for now (uses `MediaSource` API)\n- [`mediasource`][mediasource] -- supports more formats, supports streaming\n  **without seeking** (uses `MediaSource` API)\n- Blob URL -- supports the most formats of all (anything the `<video>` tag supports\n  from an http url), **with seeking**, but **does not support streaming** (entire\n  file must be downloaded first)\n\n[videostream]: https://www.npmjs.com/package/videostream\n[mediasource]: https://www.npmjs.com/package/mediasource\n\nThe Blob URL strategy will not be attempted if the file is over\n`opts.maxBlobLength` (200 MB by default) since it requires the entire file to be\ndownloaded before playback can start which gives the appearance of the `<video>`\ntag being stalled. If you increase the size, be sure to indicate loading progress\nto the user in the UI somehow.\n\nFor other media formats, like images, the file is just added to the DOM.\n\nFor text-based formats, like html files, pdfs, etc., the file is added to the DOM\nvia a sandboxed `<iframe>` tag.\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n\n[travis-image]: https://img.shields.io/travis/feross/render-media/master.svg\n[travis-url]: https://travis-ci.org/feross/render-media\n[npm-image]: https://img.shields.io/npm/v/render-media.svg\n[npm-url]: https://npmjs.org/package/render-media\n[downloads-image]: https://img.shields.io/npm/dm/render-media.svg\n[downloads-url]: https://npmjs.org/package/render-media\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/render-media.git"
  },
  "scripts": {
    "test": "standard && npm run test-browser",
    "test-browser": "zuul -- test/*.js",
    "test-browser-local": "zuul --local -- test/*.js"
  },
  "version": "2.10.0"
}
