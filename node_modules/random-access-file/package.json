{
  "_args": [
    [
      {
        "raw": "random-access-file@^1.0.1",
        "scope": null,
        "escapedName": "random-access-file",
        "name": "random-access-file",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/fs-chunk-store"
    ]
  ],
  "_from": "random-access-file@>=1.0.1 <2.0.0",
  "_id": "random-access-file@1.8.1",
  "_inCache": true,
  "_location": "/random-access-file",
  "_nodeVersion": "8.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/random-access-file-1.8.1.tgz_1497037540287_0.06949266092851758"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "random-access-file@^1.0.1",
    "scope": null,
    "escapedName": "random-access-file",
    "name": "random-access-file",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fs-chunk-store"
  ],
  "_resolved": "https://registry.npmjs.org/random-access-file/-/random-access-file-1.8.1.tgz",
  "_shasum": "b1a54a0f924fbd4d45731a5771aea36be2166532",
  "_shrinkwrap": null,
  "_spec": "random-access-file@^1.0.1",
  "_where": "/data/mis_programas/torrent-player/node_modules/fs-chunk-store",
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/random-access-file/issues"
  },
  "dependencies": {
    "buffer-alloc-unsafe": "^1.0.0",
    "debug": "^2.5.2",
    "inherits": "^2.0.1",
    "mkdirp": "^0.5.1",
    "thunky": "^1.0.1"
  },
  "description": "Continuous reading or writing to a file using random offsets and lengths",
  "devDependencies": {
    "standard": "^10.0.1",
    "tape": "^4.5.1",
    "to-buffer": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+Uhk0Of+dWHWjpbL2hizcwSV1UomcN3S0iUGV6BTZ2Js1BP9jHx3E5CT7y0eLbqTQNkVi4iehkHmia7Mdqa47w==",
    "shasum": "b1a54a0f924fbd4d45731a5771aea36be2166532",
    "tarball": "https://registry.npmjs.org/random-access-file/-/random-access-file-1.8.1.tgz"
  },
  "gitHead": "fcd12df79bfd64354a55733fc5aa33866ddcfd62",
  "homepage": "https://github.com/mafintosh/random-access-file",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "random-access-file",
  "optionalDependencies": {},
  "readme": "# random-access-file\n\nContinuous reading or writing to a file using random offsets and lengths\n\n```\nnpm install random-access-file\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/random-access-file.svg?style=flat)](http://travis-ci.org/mafintosh/random-access-file)\n\n## Why?\n\nIf you are receiving a file in multiple pieces in a distributed system it can be useful to write these pieces to disk one by one in various places throughout the file without having to open and close a file descriptor all the time.\n\nrandom-access-file allows you to do just this.\n\n## Usage\n\n``` js\nvar randomAccessFile = require('random-access-file')\n\nvar file = randomAccessFile('my-file.txt')\n\nfile.write(10, new Buffer('hello'), function(err) {\n  // write a buffer to offset 10\n  file.read(10, 5, function(err, buffer) {\n    console.log(buffer) // read 5 bytes from offset 10\n    file.close(function() {\n      console.log('file is closed')\n    })\n  })\n})\n```\n\nfile will use an open file descriptor. When you are done with the file you should call `file.close()`.\n\n## API\n\n#### `var file = randomAccessFile(filename, [options])`\n\nCreate a new file. Options include:\n\n``` js\n{\n  truncate: false, // truncate the file before reading / writing\n  length: someLength, // truncate the file to this size first\n  readable: true, // should the file be opened as readable?\n  writable: true  // should the file be opened as writable?\n}\n```\n\n#### `file.write(offset, buffer, [callback])`\n\nWrite a buffer at a specific offset.\n\n#### `file.read(offset, length, callback)`\n\nRead a buffer at a specific offset. Callback is called with the buffer read.\n\n#### `file.del(offset, length, callback)`\n\nWill truncate the file if offset + length is larger than the current file length.\nIs otherwise a noop.\n\n#### `file.end([options], callback)`\n\nCall this method when the entire file has been written. Options include:\n\n``` js\n{\n  mtime: mtime, // set the file's mtime\n  atime: atime // set the file's atime\n}\n```\n\n#### `file.close([callback])`\n\nClose the underlying file descriptor.\n\n#### `file.unlink([callback])`\n\nUnlink the underlying file.\n\n#### `file.on('open')`\n\nEmitted when the file descriptor has been opened. You can access the fd using `file.fd`.\nYou do not need to wait for this event before doing any reads/writes.\n\n#### `file.on('close')`\n\nEmitted when the file has been closed.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/random-access-file.git"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "version": "1.8.1"
}
