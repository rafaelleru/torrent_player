{
  "_args": [
    [
      {
        "raw": "bittorrent-tracker@^9.0.0",
        "scope": null,
        "escapedName": "bittorrent-tracker",
        "name": "bittorrent-tracker",
        "rawSpec": "^9.0.0",
        "spec": ">=9.0.0 <10.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/torrent-discovery"
    ]
  ],
  "_from": "bittorrent-tracker@>=9.0.0 <10.0.0",
  "_id": "bittorrent-tracker@9.2.3",
  "_inCache": true,
  "_location": "/bittorrent-tracker",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bittorrent-tracker-9.2.3.tgz_1498258552766_0.6793739115819335"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bittorrent-tracker@^9.0.0",
    "scope": null,
    "escapedName": "bittorrent-tracker",
    "name": "bittorrent-tracker",
    "rawSpec": "^9.0.0",
    "spec": ">=9.0.0 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/torrent-discovery"
  ],
  "_resolved": "https://registry.npmjs.org/bittorrent-tracker/-/bittorrent-tracker-9.2.3.tgz",
  "_shasum": "3bc4e50f2e8e0f573cdc94e931edd417ec28e28f",
  "_shrinkwrap": null,
  "_spec": "bittorrent-tracker@^9.0.0",
  "_where": "/data/mis_programas/torrent-player/node_modules/torrent-discovery",
  "author": {
    "name": "WebTorrent, LLC",
    "email": "feross@webtorrent.io",
    "url": "https://webtorrent.io"
  },
  "bin": {
    "bittorrent-tracker": "./bin/cmd.js"
  },
  "browser": {
    "./lib/common-node.js": false,
    "./lib/client/http-tracker.js": false,
    "./lib/client/udp-tracker.js": false,
    "./server.js": false
  },
  "bugs": {
    "url": "https://github.com/webtorrent/bittorrent-tracker/issues"
  },
  "dependencies": {
    "bencode": "^1.0.0",
    "bittorrent-peerid": "^1.0.2",
    "bn.js": "^4.4.0",
    "bufferutil": "^3.0.0",
    "compact2string": "^1.2.0",
    "debug": "^2.0.0",
    "inherits": "^2.0.1",
    "ip": "^1.0.1",
    "lru": "^3.0.0",
    "minimist": "^1.1.1",
    "once": "^1.3.0",
    "random-iterate": "^1.0.1",
    "randombytes": "^2.0.3",
    "run-parallel": "^1.1.2",
    "run-series": "^1.0.2",
    "safe-buffer": "^5.0.0",
    "simple-get": "^2.0.0",
    "simple-peer": "^8.0.0",
    "simple-websocket": "^5.0.0",
    "string2compact": "^1.1.1",
    "uniq": "^1.0.1",
    "unordered-array-remove": "^1.0.2",
    "ws": "^3.0.0",
    "xtend": "^4.0.0"
  },
  "description": "Simple, robust, BitTorrent tracker (client & server) implementation",
  "devDependencies": {
    "electron-webrtc": "^0.3.0",
    "magnet-uri": "^5.1.3",
    "standard": "*",
    "tape": "^4.0.0",
    "webtorrent-fixtures": "^1.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KW7nE/Lwxlpy6BmEEufvwXXsAnq7961xsoE8qL2PWrwKqKjEWLIX/T3REdq6o+RQT0YYdmy7NnqVRs/w+2LUjg==",
    "shasum": "3bc4e50f2e8e0f573cdc94e931edd417ec28e28f",
    "tarball": "https://registry.npmjs.org/bittorrent-tracker/-/bittorrent-tracker-9.2.3.tgz"
  },
  "gitHead": "01c550dac05ed43aeed183b04979ffbba379720d",
  "homepage": "https://github.com/webtorrent/bittorrent-tracker#readme",
  "keywords": [
    "bittorrent",
    "p2p",
    "peer",
    "peer-to-peer",
    "stream",
    "torrent",
    "tracker",
    "wire"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    }
  ],
  "name": "bittorrent-tracker",
  "optionalDependencies": {
    "bufferutil": "^3.0.0"
  },
  "readme": "# bittorrent-tracker [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/webtorrent/bittorrent-tracker/master.svg\n[travis-url]: https://travis-ci.org/webtorrent/bittorrent-tracker\n[npm-image]: https://img.shields.io/npm/v/bittorrent-tracker.svg\n[npm-url]: https://npmjs.org/package/bittorrent-tracker\n[downloads-image]: https://img.shields.io/npm/dm/bittorrent-tracker.svg\n[downloads-url]: https://npmjs.org/package/bittorrent-tracker\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n#### Simple, robust, BitTorrent tracker (client & server) implementation\n\n![tracker](https://raw.githubusercontent.com/webtorrent/bittorrent-tracker/master/img.png)\n\nNode.js implementation of a [BitTorrent tracker](https://wiki.theory.org/BitTorrentSpecification#Tracker_HTTP.2FHTTPS_Protocol), client and server.\n\nA **BitTorrent tracker** is a web service which responds to requests from BitTorrent\nclients. The requests include metrics from clients that help the tracker keep overall\nstatistics about the torrent. The response includes a peer list that helps the client\nparticipate in the torrent swarm.\n\nThis module is used by [WebTorrent](http://webtorrent.io).\n\n## features\n\n- Includes client & server implementations\n- Supports all mainstream tracker types:\n  - HTTP trackers\n  - UDP trackers ([BEP 15](http://www.bittorrent.org/beps/bep_0015.html))\n  - WebTorrent trackers ([BEP forthcoming](http://webtorrent.io))\n- Supports ipv4 & ipv6\n- Supports tracker \"scrape\" extension\n- Robust and well-tested\n  - Comprehensive test suite (runs entirely offline, so it's reliable)\n  - Used by popular clients: [WebTorrent](http://webtorrent.io), [peerflix](https://www.npmjs.com/package/peerflix), and [playback](https://mafintosh.github.io/playback/)\n- Tracker statistics available via web interface at `/stats` or JSON data at `/stats.json`\n\nAlso see [bittorrent-dht](https://www.npmjs.com/package/bittorrent-dht).\n\n## install\n\n```\nnpm install bittorrent-tracker\n```\n\n## usage\n\n### client\n\nTo connect to a tracker, just do this:\n\n```js\nvar Client = require('bittorrent-tracker')\n\nvar requiredOpts = {\n  infoHash: new Buffer('012345678901234567890'), // hex string or Buffer\n  peerId: new Buffer('01234567890123456789'), // hex string or Buffer\n  announce: [], // list of tracker server urls\n  port: 6881 // torrent client port, (in browser, optional)\n}\n\nvar optionalOpts = {\n  getAnnounceOpts: function () {\n    // Provide a callback that will be called whenever announce() is called\n    // internally (on timer), or by the user\n    return {\n      uploaded: 0,\n      downloaded: 0,\n      left: 0,\n      customParam: 'blah' // custom parameters supported\n    }\n  }\n  // RTCPeerConnection config object (only used in browser)\n  rtcConfig: {},\n  // User-Agent header for http requests\n  userAgent: '',\n  // Custom webrtc impl, useful in node to specify [wrtc](https://npmjs.com/package/wrtc)\n  wrtc: {},\n}\n\nvar client = new Client(requiredOpts)\n\nclient.on('error', function (err) {\n  // fatal client error!\n  console.log(err.message)\n})\n\nclient.on('warning', function (err) {\n  // a tracker was unavailable or sent bad data to the client. you can probably ignore it\n  console.log(err.message)\n})\n\n// start getting peers from the tracker\nclient.start()\n\nclient.on('update', function (data) {\n  console.log('got an announce response from tracker: ' + data.announce)\n  console.log('number of seeders in the swarm: ' + data.complete)\n  console.log('number of leechers in the swarm: ' + data.incomplete)\n})\n\nclient.once('peer', function (addr) {\n  console.log('found a peer: ' + addr) // 85.10.239.191:48623\n})\n\n// announce that download has completed (and you are now a seeder)\nclient.complete()\n\n// force a tracker announce. will trigger more 'update' events and maybe more 'peer' events\nclient.update()\n\n// provide parameters to the tracker\nclient.update({\n  uploaded: 0,\n  downloaded: 0,\n  left: 0,\n  customParam: 'blah' // custom parameters supported\n})\n\n// stop getting peers from the tracker, gracefully leave the swarm\nclient.stop()\n\n// ungracefully leave the swarm (without sending final 'stop' message)\nclient.destroy()\n\n// scrape\nclient.scrape()\n\nclient.on('scrape', function (data) {\n  console.log('got a scrape response from tracker: ' + data.announce)\n  console.log('number of seeders in the swarm: ' + data.complete)\n  console.log('number of leechers in the swarm: ' + data.incomplete)\n  console.log('number of total downloads of this torrent: ' + data.downloaded)\n})\n```\n\n### server\n\nTo start a BitTorrent tracker server to track swarms of peers:\n\n```js\nvar Server = require('bittorrent-tracker').Server\n\nvar server = new Server({\n  udp: true, // enable udp server? [default=true]\n  http: true, // enable http server? [default=true]\n  ws: true, // enable websocket server? [default=true]\n  stats: true, // enable web-based statistics? [default=true]\n  filter: function (infoHash, params, cb) {\n    // Blacklist/whitelist function for allowing/disallowing torrents. If this option is\n    // omitted, all torrents are allowed. It is possible to interface with a database or\n    // external system before deciding to allow/deny, because this function is async.\n\n    // It is possible to block by peer id (whitelisting torrent clients) or by secret\n    // key (private trackers). Full access to the original HTTP/UDP request parameters\n    // are available in `params`.\n\n    // This example only allows one torrent.\n\n    var allowed = (infoHash === 'aaa67059ed6bd08362da625b3ae77f6f4a075aaa')\n    if (allowed) {\n      // If the callback is passed `null`, the torrent will be allowed.\n      cb(null)\n    } else {\n      // If the callback is passed an `Error` object, the torrent will be disallowed\n      // and the error's `message` property will be given as the reason.\n      cb(new Error('disallowed torrent'))\n    }\n  }\n})\n\n// Internal http, udp, and websocket servers exposed as public properties.\nserver.http\nserver.udp\nserver.ws\n\nserver.on('error', function (err) {\n  // fatal server error!\n  console.log(err.message)\n})\n\nserver.on('warning', function (err) {\n  // client sent bad data. probably not a problem, just a buggy client.\n  console.log(err.message)\n})\n\nserver.on('listening', function () {\n  // fired when all requested servers are listening\n  console.log('listening on http port:' + server.http.address().port)\n  console.log('listening on udp port:' + server.udp.address().port)\n})\n\n// start tracker server listening! Use 0 to listen on a random free port.\nserver.listen(port, hostname, onlistening)\n\n// listen for individual tracker messages from peers:\n\nserver.on('start', function (addr) {\n  console.log('got start message from ' + addr)\n})\n\nserver.on('complete', function (addr) {})\nserver.on('update', function (addr) {})\nserver.on('stop', function (addr) {})\n\n// get info hashes for all torrents in the tracker server\nObject.keys(server.torrents)\n\n// get the number of seeders for a particular torrent\nserver.torrents[infoHash].complete\n\n// get the number of leechers for a particular torrent\nserver.torrents[infoHash].incomplete\n\n// get the peers who are in a particular torrent swarm\nserver.torrents[infoHash].peers\n```\n\nThe http server will handle requests for the following paths: `/announce`, `/scrape`. Requests for other paths will not be handled.\n\n## multi scrape\n\nScraping multiple torrent info is possible with a static `Client.scrape` method:\n\n```js\nvar Client = require('bittorrent-tracker')\nClient.scrape({ announce: announceUrl, infoHash: [ infoHash1, infoHash2 ]}, function (err, results) {\n  results[infoHash1].announce\n  results[infoHash1].infoHash\n  results[infoHash1].complete\n  results[infoHash1].incomplete\n  results[infoHash1].downloaded\n\n  // ...\n})\n````\n\n## command line\n\nEasily start a tracker server:\n\n```sh\n$ bittorrent-tracker\nhttp server listening on 8000\nudp server listening on 8000\nws server listening on 8000\n```\n\nLots of options:\n\n```sh\n$ bittorrent-tracker --help\n  bittorrent-tracker - Start a bittorrent tracker server\n\n  Usage:\n    bittorrent-tracker [OPTIONS]\n\n  If no --http, --udp, or --ws option is supplied, all tracker types will be started.\n\n  Options:\n    -p, --port [number]  change the port [default: 8000]\n        --trust-proxy    trust 'x-forwarded-for' header from reverse proxy\n        --interval       client announce interval (ms) [default: 600000]\n        --http           enable http server\n        --udp            enable udp server\n        --ws             enable websocket server\n    -q, --quiet          only show error output\n    -s, --silent         show no output\n    -v, --version        print the current version\n```\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](https://feross.org) and [WebTorrent, LLC](https://webtorrent.io).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/webtorrent/bittorrent-tracker.git"
  },
  "scripts": {
    "start": "node server.js",
    "test": "standard && tape test/*.js",
    "update-authors": "./bin/update-authors.sh"
  },
  "version": "9.2.3"
}
