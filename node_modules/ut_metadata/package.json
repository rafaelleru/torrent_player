{
  "_args": [
    [
      {
        "raw": "ut_metadata@^3.0.8",
        "scope": null,
        "escapedName": "ut_metadata",
        "name": "ut_metadata",
        "rawSpec": "^3.0.8",
        "spec": ">=3.0.8 <4.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/webtorrent"
    ]
  ],
  "_from": "ut_metadata@>=3.0.8 <4.0.0",
  "_id": "ut_metadata@3.0.11",
  "_inCache": true,
  "_location": "/ut_metadata",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ut_metadata-3.0.11.tgz_1498258973471_0.8099679651204497"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ut_metadata@^3.0.8",
    "scope": null,
    "escapedName": "ut_metadata",
    "name": "ut_metadata",
    "rawSpec": "^3.0.8",
    "spec": ">=3.0.8 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webtorrent"
  ],
  "_resolved": "https://registry.npmjs.org/ut_metadata/-/ut_metadata-3.0.11.tgz",
  "_shasum": "da804c32e493cdc5e62d6867dc21d5742ad93949",
  "_shrinkwrap": null,
  "_spec": "ut_metadata@^3.0.8",
  "_where": "/data/mis_programas/torrent-player/node_modules/webtorrent",
  "author": {
    "name": "WebTorrent, LLC",
    "email": "feross@webtorrent.io",
    "url": "https://webtorrent.io"
  },
  "bugs": {
    "url": "https://github.com/webtorrent/ut_metadata/issues"
  },
  "dependencies": {
    "bencode": "^1.0.0",
    "bitfield": "^1.0.1",
    "debug": "^2.2.0",
    "inherits": "^2.0.1",
    "safe-buffer": "^5.0.1",
    "simple-sha1": "^2.0.0"
  },
  "description": "Extension for Peers to Send Metadata Files (BEP 9)",
  "devDependencies": {
    "bittorrent-protocol": "^2.0.0",
    "brfs": "^1.2.0",
    "standard": "*",
    "tape": "^4.0.0",
    "webtorrent-fixtures": "^1.3.0",
    "zuul": "^3.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-PbDsUBK3zyiL3q4i785QtLMpuYHDToGFt2HGnb6Ax9dGIYYVfeGKmAiRf4n0wvz3bqoIvESDBO/He/6QErpakg==",
    "shasum": "da804c32e493cdc5e62d6867dc21d5742ad93949",
    "tarball": "https://registry.npmjs.org/ut_metadata/-/ut_metadata-3.0.11.tgz"
  },
  "gitHead": "fb44d87d8a2636e65eb96c53c8226a4c4dfa3a82",
  "homepage": "https://github.com/webtorrent/ut_metadata#readme",
  "keywords": [
    "Extension for Peers to Send Metadata Files",
    "bep",
    "bep 9",
    "bep_0009",
    "bittorrent",
    "metadata",
    "p2p",
    "torrent",
    "ut_metadata"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    }
  ],
  "name": "ut_metadata",
  "optionalDependencies": {},
  "readme": "# ut_metadata [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]\n\n[travis-image]: https://img.shields.io/travis/webtorrent/ut_metadata/master.svg\n[travis-url]: https://travis-ci.org/webtorrent/ut_metadata\n[npm-image]: https://img.shields.io/npm/v/ut_metadata.svg\n[npm-url]: https://npmjs.org/package/ut_metadata\n[downloads-image]: https://img.shields.io/npm/dm/ut_metadata.svg\n[downloads-url]: https://npmjs.org/package/ut_metadata\n[standard-image]: https://img.shields.io/badge/code_style-standard-brightgreen.svg\n[standard-url]: https://standardjs.com\n\n### BitTorrent Extension for Peers to Send Metadata Files (BEP 9)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/ut_metadata.svg)](https://saucelabs.com/u/ut_metadata)\n\nJavaScript implementation of the [Extension for Peers to Send Metadata Files (BEP 9)](http://www.bittorrent.org/beps/bep_0009.html). Use with [bittorrent-protocol](https://www.npmjs.com/package/bittorrent-protocol).\n\nThe purpose of this extension is to allow clients to join a swarm and complete a download without the need of downloading a .torrent file first. This extension instead allows clients to download the metadata from peers. It makes it possible to support magnet links, a link on a web page only containing enough information to join the swarm (the info hash).\n\nWorks in the browser with [browserify](http://browserify.org/)! This module is used by [WebTorrent](http://webtorrent.io).\n\n### install\n\n```\nnpm install ut_metadata\n```\n\n### usage\n\nThis package should be used with [bittorrent-protocol](https://www.npmjs.com/package/bittorrent-protocol), which supports a plugin-like system for extending the protocol with additional functionality.\n\nSay you're already using `bittorrent-protocol`. Your code might look something like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\nTo add support for BEP 9, simply modify your code like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\nvar ut_metadata = require('ut_metadata')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // initialize the extension\n  wire.use(ut_metadata())\n\n  // all `ut_metadata` functionality can now be accessed at wire.ut_metadata\n\n  // ask the peer to send us metadata\n  wire.ut_metadata.fetch()\n\n  // 'metadata' event will fire when the metadata arrives and is verified to be correct!\n  wire.ut_metadata.on('metadata', function (metadata) {\n    // got metadata!\n\n    // Note: the event will not fire if the peer does not support ut_metadata, if they\n    // don't have metadata yet either, if they repeatedly send invalid data, or if they\n    // simply don't respond.\n  })\n\n  // optionally, listen to the 'warning' event if you want to know that metadata is\n  // probably not going to arrive for one of the above reasons.\n  wire.ut_metadata.on('warning', function (err) {\n    console.log(err.message)\n  })\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\n### api\n\n#### `ut_metadata([metadata])`\n\nInitialize the extension. If you have the torrent metadata (Buffer), pass it into the\n`ut_metadata` constructor so it's made available to the peer.\n\n```js\nvar metadata = fs.readFileSync(__dirname + '/file.torrent')\nwire.use(ut_metadata(metadata))\n```\n\n#### `ut_metadata.fetch()`\n\nAsk the peer to send metadata.\n\n#### `ut_metadata.cancel()`\n\nStop asking the peer to send metadata.\n\n#### `ut_metadata.setMetadata(metadata)`\n\nSet the metadata. If you didn't have the metadata at the time `ut_metadata` was\ninitialized, but you end up getting it from another peer (or somewhere else), you should\ncall `setMetadata` so the metadata will be available to the peer.\n\n#### `ut_metadata.on('metadata', function (metadata) {})`\n\nFired when metadata is available and verified to be correct. Called with a single\nparameter of type Buffer.\n\n```js\nwire.ut_metadata.on('metadata', function (metadata) {\n  console.log(Buffer.isBuffer(metadata)) // true\n})\n```\n\nNote: the event will not fire if the peer does not support ut_metadata, if they\ndon't have metadata yet either, if they repeatedly send invalid data, or if they\nsimply don't respond.\n\n#### `ut_metadata.on('warning', function (err) {})`\n\nFired if:\n - the peer does not support ut_metadata\n - the peer doesn't have metadata yet\n - the peer repeatedly sent invalid data\n\n```js\nwire.ut_metadata.on('warning', function (err) {\n  console.log(err.message)\n})\n```\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](https://feross.org) and [WebTorrent, LLC](https://webtorrent.io).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/webtorrent/ut_metadata.git"
  },
  "scripts": {
    "test": "standard && npm run test-node && npm run test-browser",
    "test-browser": "zuul -- test/*.js",
    "test-browser-local": "zuul --local -- test/*.js",
    "test-node": "tape test/*.js"
  },
  "version": "3.0.11"
}
