{
  "_args": [
    [
      {
        "raw": "uint64be@^1.0.1",
        "scope": null,
        "escapedName": "uint64be",
        "name": "uint64be",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/mp4-box-encoding"
    ]
  ],
  "_from": "uint64be@>=1.0.1 <2.0.0",
  "_id": "uint64be@1.0.1",
  "_inCache": true,
  "_location": "/uint64be",
  "_nodeVersion": "3.0.0",
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "2.13.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "uint64be@^1.0.1",
    "scope": null,
    "escapedName": "uint64be",
    "name": "uint64be",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mp4-box-encoding"
  ],
  "_resolved": "https://registry.npmjs.org/uint64be/-/uint64be-1.0.1.tgz",
  "_shasum": "1f7154202f2a1b8af353871dda651bf34ce93e95",
  "_shrinkwrap": null,
  "_spec": "uint64be@^1.0.1",
  "_where": "/data/mis_programas/torrent-player/node_modules/mp4-box-encoding",
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/uint64be/issues"
  },
  "dependencies": {},
  "description": "Encode / decode big endian unsigned 64 bit integers",
  "devDependencies": {
    "standard": "^5.0.0",
    "tape": "^4.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "1f7154202f2a1b8af353871dda651bf34ce93e95",
    "tarball": "https://registry.npmjs.org/uint64be/-/uint64be-1.0.1.tgz"
  },
  "gitHead": "82c06f34f52f11c6a49e83f5ea3d7f4f7e3172e1",
  "homepage": "https://github.com/mafintosh/uint64be",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "uint64be",
  "optionalDependencies": {},
  "readme": "# uint64be\n\nEncode / decode big endian unsigned 64 bit integers\n\n```\nnpm install uint64be\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/uint64be.svg?style=flat)](http://travis-ci.org/mafintosh/uint64be)\n\n## Usage\n\n``` js\nvar uint64be = require('uint64be')\n\nvar buf = uint64be.encode(42) // returns a 8 byte buffer with 42 encoded\nconsole.log(uint64be.decode(buf)) // returns 42\n```\n\n## Notice\n\nJavascript (currently) only supports integers up to `2^53 - 1` without any\nloss of precision so beware of this if you encode / decode any integers larger than that.\n\n## API\n\n#### `buffer = uint64be.encode(num, [buffer], [offset])`\n\nEncode a number as a big endian 64 bit unsigned integer.\nOptionally you can pass a buffer + offset as the 2nd and 3rd argument\nand the number will be encoded into that buffer at the given offset.\n\n#### `num = uint64be.decode(buffer, [offset])`\n\nDecode a number from a buffer.\n\n#### `length = uint64be.encodingLength(num)`\n\nAlways returns `8`. Added to comply with the standard encoding interface in node.\nSimilarly `uint64be.encode.bytes` and `uint64be.decode.bytes` is also set to `8`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/uint64be.git"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "version": "1.0.1"
}
