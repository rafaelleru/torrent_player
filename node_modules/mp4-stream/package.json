{
  "_args": [
    [
      {
        "raw": "mp4-stream@^2.0.0",
        "scope": null,
        "escapedName": "mp4-stream",
        "name": "mp4-stream",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/videostream"
    ]
  ],
  "_from": "mp4-stream@>=2.0.0 <3.0.0",
  "_id": "mp4-stream@2.0.2",
  "_inCache": true,
  "_location": "/mp4-stream",
  "_nodeVersion": "4.6.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/mp4-stream-2.0.2.tgz_1479935715599_0.5713745877146721"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "process-nextick-args": "1.0.7",
    "safe-buffer": "5.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "mp4-stream@^2.0.0",
    "scope": null,
    "escapedName": "mp4-stream",
    "name": "mp4-stream",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/videostream"
  ],
  "_resolved": "https://registry.npmjs.org/mp4-stream/-/mp4-stream-2.0.2.tgz",
  "_shasum": "34161ba2d9b608733b4b2247edf3780ba2c47ec5",
  "_shrinkwrap": null,
  "_spec": "mp4-stream@^2.0.0",
  "_where": "/data/mis_programas/torrent-player/node_modules/videostream",
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/mp4-stream/issues"
  },
  "dependencies": {
    "inherits": "^2.0.1",
    "mp4-box-encoding": "^1.1.0",
    "next-event": "^1.0.0",
    "readable-stream": "^2.0.3"
  },
  "description": "Streaming mp4 encoder and decoder",
  "devDependencies": {
    "standard": "^5.4.1",
    "tape": "^4.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "34161ba2d9b608733b4b2247edf3780ba2c47ec5",
    "tarball": "https://registry.npmjs.org/mp4-stream/-/mp4-stream-2.0.2.tgz"
  },
  "gitHead": "978d7415f3e3e6229e7f8318c6b9fb11e9e8c9d7",
  "homepage": "https://github.com/mafintosh/mp4-stream",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jhiesey",
      "email": "john@hiesey.com"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "mp4-stream",
  "optionalDependencies": {},
  "readme": "# mp4-stream\n\nStreaming mp4 encoder and decoder\n\n```\nnpm install mp4-stream\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/mp4-stream.svg?style=flat)](http://travis-ci.org/mafintosh/mp4-stream)\n\n## Usage\n\n``` js\nvar mp4 = require('mp4-stream')\nvar fs = require('fs')\n\nvar decode = mp4.decode()\n\nfs.createReadStream('video.mp4')\n  .pipe(decode)\n  .on('box', function (headers) {\n    console.log('found box (' + headers.type + ') (' + headers.length + ')')\n    if (headers.type === 'mdat') {\n      // you can get the contents as a stream\n      console.log('box has stream data (consume stream to continue)')\n      decode.stream().resume()\n    } else if (headers.type === 'moof') {\n      // you can ignore some boxes\n      decode.ignore()\n    } else {\n      // or you can fully decode them\n      decode.decode(function (box) {\n        console.log('box contents:', box)\n      })\n    }\n  }\n  })\n```\n\nAll boxes have a type thats a 4 char string with a type name.\n\n## API\n\n#### `var stream = mp4.decode()`\n\nCreate a new decoder.\n\nThe decoder is a writable stream you should write a mp4 file to. It emits the following additional events:\n\n* `on('box', headers)` - emitted when a new box is found.\n\nEach time the `box` event fires, you must call one of these three functions:\n\n* `stream.ignore()` - ignore the entire box and continue parsing after its end\n* `stream.stream()` - get a readable stream of the box contents\n* `stream.decode(callback)` - decode the box, including all childeren in the case of containers, and pass\nthe resulting box object to the callback\n\n``` js\nvar fs = require('fs')\nvar stream = mp4.decode()\n\nstream.on('box', function (headers) {\n  console.log('found new box:', headers)\n})\n\nfs.createReadStream('my-video.mp4').pipe(stream)\n```\n\n#### `var stream = mp4.encode()`\n\nCreate a new encoder.\n\nThe encoder is a readable stream you can use to generate a mp4 file. It has the following API:\n\n* `stream.box(box, [callback])` - adds a new mp4 box to the stream.\n* `var ws = stream.mediaData(size)` - helper that adds an `mdat` box. write the media content to this stream.\n* `stream.finalize()` - finalizes the mp4 stream. call this when you're done.\n\n``` js\nvar fs = require('fs')\nvar stream = mp4.encode()\n\nstream.pipe(fs.createWriteStream('my-new-video.mp4'))\n\nstream.box(anMP4Box, function (err) {\n  // box flushed\n\n  var content = stream.mediaData(lengthOfStream, function () {\n    // wrote media data\n    stream.finalize()\n  })\n\n  someContent.pipe(content)\n})\n\n```\n\n## Decode and encode a file\n\nTo decode and encode an mp4 file with this module do\n\n``` js\nvar encoder = mp4.encode()\nvar decoder = mp4.decode()\n\ndecoder.on('box', function (headers) {\n  decoder.decode(function (box) {\n    encoder.box(box, next)\n  })\n})\n\nfs.createReadStream('my-movie.mp4').pipe(decoder)\nencoder.pipe(fs.createWriteStream('my-movie-copy.mp4'))\n```\n\n## Boxes\n\nMp4 supports a wide range of boxes, implemented in\n[mp4-box-encoding](https://github.com/jhiesey/mp4-box-encoding).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/mp4-stream.git"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "version": "2.0.2"
}
