{
  "_args": [
    [
      {
        "raw": "lru@^3.1.0",
        "scope": null,
        "escapedName": "lru",
        "name": "lru",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/bittorrent-dht"
    ]
  ],
  "_from": "lru@>=3.1.0 <4.0.0",
  "_id": "lru@3.1.0",
  "_inCache": true,
  "_location": "/lru",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/lru-3.1.0.tgz_1467851396813_0.2838155822828412"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "2.15.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lru@^3.1.0",
    "scope": null,
    "escapedName": "lru",
    "name": "lru",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bittorrent-dht",
    "/bittorrent-tracker"
  ],
  "_resolved": "https://registry.npmjs.org/lru/-/lru-3.1.0.tgz",
  "_shasum": "ea7fb8546d83733396a13091d76cfeb4c06837d5",
  "_shrinkwrap": null,
  "_spec": "lru@^3.1.0",
  "_where": "/data/mis_programas/torrent-player/node_modules/bittorrent-dht",
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/chriso/lru/issues"
  },
  "dependencies": {
    "inherits": "^2.0.1"
  },
  "description": "A simple O(1) LRU cache",
  "devDependencies": {
    "standard": "^6.0.8",
    "vows": "^0.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "ea7fb8546d83733396a13091d76cfeb4c06837d5",
    "tarball": "https://registry.npmjs.org/lru/-/lru-3.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "gitHead": "ee57d6036575a1611a1d31f75d3dc94f313d5e87",
  "homepage": "http://github.com/chriso/lru",
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "cohara87",
      "email": "cohara87@gmail.com"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "lru",
  "optionalDependencies": {},
  "readme": "# lru\n\n**A simple LRU cache supporting O(1) set, get and eviction of old keys**\n\n## Installation\n\n```bash\n$ npm install lru\n```\n\n### Example\n\n```javascript\nvar LRU = require('lru');\n\nvar cache = new LRU(2),\n    evicted\n\ncache.on('evict',function(data) { evicted = data });\n\ncache.set('foo', 'bar');\ncache.get('foo'); //=> bar\n\ncache.set('foo2', 'bar2');\ncache.get('foo2'); //=> bar2\n\ncache.set('foo3', 'bar3'); // => evicted = { key: 'foo', value: 'bar' }\ncache.get('foo3');         // => 'bar3'\ncache.remove('foo2')       // => 'bar2'\ncache.remove('foo4')       // => undefined\ncache.length               // => 1\ncache.keys                 // => ['foo3']\n\ncache.clear()              // => it will NOT emit the 'evict' event\ncache.length               // => 0\ncache.keys                 // => []\n```\n\n### API\n\n#### `LRU( length )`\nCreate a new LRU cache that stores `length` elements before evicting the least recently used.\nOptionally you can pass an options map with additional options:\n\n```js\n{\n  max: maxElementsToStore,\n  maxAge: maxAgeInMilliseconds\n}\n```\n\nIf you pass `maxAge` items will be evicted if they are older than `maxAge` when you access them.\n\n**Returns**: the newly created LRU cache\n\n\n#### Properties\n##### `.length`\nThe number of keys currently in the cache.\n\n##### `.keys`\nArray of all the keys currently in the cache.\n\n#### Methods\n\n##### `.set( key, value )`\nSet the value of the key and mark the key as most recently used.\n\n**Returns**: `value`\n\n##### `.get( key )`\nQuery the value of the key and mark the key as most recently used.\n\n**Returns**: value of key if found; `undefined` otherwise.\n\n##### `.peek( key )`\nQuery the value of the key without marking the key as most recently used.\n\n**Returns**: value of key if found; `undefined` otherwise.\n\n##### `.remove( key )`\nRemove the value from the cache.\n\n\n**Returns**: value of key if found; `undefined` otherwise.\n\n##### `.clear()`\nClear the cache. This method does **NOT** emit the `evict` event.\n\n##### `.on( event, callback )`\nRespond to events. Currently only the `evict` event is implemented. When a key is evicted, the callback is executed with an associative array containing the evicted key: `{key: key, value: value}`.\n\n\n### Credits\n\nA big thanks to [Dusty Leary](https://github.com/dustyleary) who\nfinished the library.\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/chriso/lru.git"
  },
  "scripts": {
    "test": "standard && vows test/*.js --spec"
  },
  "version": "3.1.0"
}
