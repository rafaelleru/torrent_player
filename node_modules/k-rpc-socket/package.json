{
  "_args": [
    [
      {
        "raw": "k-rpc-socket@^1.7.0",
        "scope": null,
        "escapedName": "k-rpc-socket",
        "name": "k-rpc-socket",
        "rawSpec": "^1.7.0",
        "spec": ">=1.7.0 <2.0.0",
        "type": "range"
      },
      "/data/mis_programas/torrent-player/node_modules/k-rpc"
    ]
  ],
  "_from": "k-rpc-socket@>=1.7.0 <2.0.0",
  "_id": "k-rpc-socket@1.7.1",
  "_inCache": true,
  "_location": "/k-rpc-socket",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/k-rpc-socket-1.7.1.tgz_1498257484485_0.40645852987654507"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "k-rpc-socket@^1.7.0",
    "scope": null,
    "escapedName": "k-rpc-socket",
    "name": "k-rpc-socket",
    "rawSpec": "^1.7.0",
    "spec": ">=1.7.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/k-rpc"
  ],
  "_resolved": "https://registry.npmjs.org/k-rpc-socket/-/k-rpc-socket-1.7.1.tgz",
  "_shasum": "e6e92a00b2c74906ad69c42b6ea213dce8914d95",
  "_shrinkwrap": null,
  "_spec": "k-rpc-socket@^1.7.0",
  "_where": "/data/mis_programas/torrent-player/node_modules/k-rpc",
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/k-rpc-socket/issues"
  },
  "dependencies": {
    "bencode": "^1.0.0",
    "safe-buffer": "^5.1.1"
  },
  "description": "Low level implementation of the k-rpc network layer that the BitTorrent DHT uses",
  "devDependencies": {
    "standard": "*",
    "tape": "^4.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-FmHDmrT6sIs2MM/uMYW0Jmjd01wk2NxzPd6+9iH7onvutqhWXZ8PoZ9p/mVS58SQILC7jKZacC72V5QNkvAXew==",
    "shasum": "e6e92a00b2c74906ad69c42b6ea213dce8914d95",
    "tarball": "https://registry.npmjs.org/k-rpc-socket/-/k-rpc-socket-1.7.1.tgz"
  },
  "gitHead": "98ac0b92d246d2cecca67f10185574e2cc492fd6",
  "homepage": "https://github.com/mafintosh/k-rpc-socket",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "k-rpc-socket",
  "optionalDependencies": {},
  "readme": "# k-rpc-socket\n\nLow level implementation of the k-rpc network layer that the [BitTorrent DHT](http://www.bittorrent.org/beps/bep_0005.html) uses.\nMostly extracted from the [bittorrent-dht](https://github.com/feross/bittorrent-dht) module on npm into its own repo.\n\n```\nnpm install k-rpc-socket\n```\n\n[![build status](http://travis-ci.org/mafintosh/k-rpc-socket.svg?branch=master)](http://travis-ci.org/mafintosh/k-rpc-socket)\n\n## Usage\n\n``` js\nvar rpc = require('k-rpc-socket')\n\nvar socket = rpc()\n\nsocket.on('query', function (query, peer) {\n  socket.response(peer, query, {echo: query.a})\n})\n\nsocket.bind(10000, function () {\n  var anotherSocket = rpc()\n  anotherSocket.query({host: '127.0.0.1', port: 10000}, {q: 'echo', a: {hello: 'world'}}, function (err, response) {\n    console.log(response.r) // prints {echo: {hello: Buffer('world')}}\n  })\n})\n```\n\n## API\n\n#### `var socket = rpc([options])`\n\nCreate a new k-rpc-socket. Options include:\n\n``` js\n{\n  timeout: queryTimeout, // defaults to 2s\n  socket: optionalUdpSocket,\n  isIP: optionalBooleanFunction\n}\n```\n\n#### `socket.send(peer, message, [callback])`\n\nSend a raw message. The callback is called when the message has been flushed from the socket.\n\n#### `var id = socket.query(peer, query, [callback])`\n\nSend a query message. The callback is called with `(err, response, peer, request)`.\nYou should set the method name you are trying to call as `{q: 'method_name'}` and query data as `{a: someQueryData}`.\n\nThe query method returns a query id. You can use this id to cancel the query using the `.cancel` method.\n\n#### `socket.cancel(id)`\n\nCancel a query. Will call the corresponding query's callback with an error indicating that it was cancelled.\n\n#### `socket.response(peer, query, response, [callback])`\n\nSend a response to a query. The callback is called when the message has been flushed from the socket.\n\n#### `socket.error(peer, query, error, [callback])`\n\nSend an error reploy to a query. The callback is called when the message has been flushed from the socket.\n\n#### `socket.inflight`\n\nInteger representing the number of concurrent queries that are currently pending.\n\n#### `socket.destroy()`\n\nDestroys and unbinds the socket\n\n#### `socket.bind([port], [address], [callback])`\n\nCall this to bind to a specific port. If port is not specified or is 0, the operating system\nwill attempt to bind to a random port. If address is not specified, the operating system will\nattempt to listen on all addresses.\n\nIf you don't call this a random free port will be chosen.\n\n#### `socket.on('query', query, peer)`\n\nWhen a query is received a `query` event is emitted with the query data and a peer object representing the querying peer.\n\n#### `socket.on('warning', error)`\n\nEmitted when a non fatal error has occured. It is safe to ignore this.\n\n#### `socket.on('error', error)`\n\nEmitted when a fatal error has occured.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/k-rpc-socket.git"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "version": "1.7.1"
}
